name: Docker Build dataflow-gen-base
run-name: ${{ github.head_ref || github.ref_name }}

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - ready_for_review
      - reopened
      - synchronize
  push:
    branches:
      - main

jobs:
  bld:
    runs-on: ubuntu-latest
    timeout-minutes: 1440
    env:
      AZ_REG_FQDN: ${{ vars.AZ_REGISTRY_NAME }}.azurecr.io
      AZ_REG_NAME: ${{ vars.AZ_REGISTRY_NAME }}
      AZ_REG_PASSWORD: ${{ secrets.AZ_REGISTRY_PASSWORD }}
      AZ_REG_PRUNE_DAYS: ${{ vars.AZ_REG_PRUNE_DAYS || '20' }}
      AZ_REG_PRUNE_ENABLE_DELETE: ${{ vars.AZ_REG_PRUNE_ENABLE_DELETE || 'false' }}
      AZ_REG_PRUNE_FORCE_ANALYZE: ${{ vars.AZ_REG_PRUNE_FORCE_ANALYZE || 'false' }}
      AZ_REG_PRUNE_KEEP_REGEX: ${{ vars.AZ_REG_PRUNE_KEEP_REGEX }}
      AZ_REG_USERNAME: ${{ vars.AZ_REGISTRY_USERNAME }}
      DOCKER_BUILD_ARG1: GITHUB_PAT=${{ secrets.GH_TOKEN }}
      DOCKER_BUILD_DISABLE: ${{ vars.DOCKER_BUILD_DISABLE || 'false' }}
      DOCKER_BUILD_PUSH_BOOL_OVERRIDE: ${{ vars.DOCKER_BUILD_PUSH_BOOL_OVERRIDE || 'false' }}
      GIT_BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - AZ_REG_REPOSITORY: alp-dataflow-gen-base
            DOCKER_BUILD_CONTEXT_PATH: ./dataflow-gen-base
            DOCKER_BUILD_FILE_PATH: ./dataflow-gen-base/Dockerfile

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Setup
        id: setup
        run: |
          DOCKER_BUILD_PUSH_BOOL_STR=false
          if [[ $GITHUB_EVENT_NAME == "push" ]] || [ $GITHUB_EVENT_NAME = "workflow_dispatch" ] || [ $DOCKER_BUILD_PUSH_BOOL_OVERRIDE = true]; then
            DOCKER_BUILD_PUSH_BOOL_STR=true
          fi

          if [ $GIT_BRANCH_NAME == "main" ]; then
            DOCKER_IMG_TAG_NAME=develop
          elif [ $DOCKER_BUILD_PUSH_BOOL_STR = true ]; then
            DOCKER_IMG_TAG_NAME=$GIT_BRANCH_NAME
            if [[ $GIT_BRANCH_NAME = */* ]]; then
              DOCKER_IMG_TAG_NAME=$(printf "%s" "$GIT_BRANCH_NAME" | awk -F '/' '{print $2}')
            fi 
          else
            DOCKER_IMG_TAG_NAME=$(echo ${{ github.sha }} | cut -c1-8)
          fi

          echo "DOCKER_BUILD_PLATFORMS=linux/amd64" | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT | tee -a $GITHUB_STEP_SUMMARY
          echo "DOCKER_BUILD_PUSH_BOOL_STR=$DOCKER_BUILD_PUSH_BOOL_STR" | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT | tee -a $GITHUB_STEP_SUMMARY
          echo "DOCKER_IMG_TAG_NAME=$DOCKER_IMG_TAG_NAME" | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT | tee -a $GITHUB_STEP_SUMMARY
          echo GIT_BRANCH_NAME="${GIT_BRANCH_NAME}" | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT | tee -a $GITHUB_STEP_SUMMARY

          echo AZ_REG_REPOSITORY=${{ matrix.AZ_REG_REPOSITORY }} | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT | tee -a $GITHUB_STEP_SUMMARY
          echo DOCKER_BUILD_CONTEXT_PATH=${{ matrix.DOCKER_BUILD_CONTEXT_PATH }} | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT | tee -a $GITHUB_STEP_SUMMARY
          echo DOCKER_BUILD_FILE_PATH=${{ matrix.DOCKER_BUILD_FILE_PATH }} | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT | tee -a $GITHUB_STEP_SUMMARY

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.AZ_REG_FQDN }}
          username: ${{ env.AZ_REG_USERNAME }}
          password: ${{ env.AZ_REG_PASSWORD }}

      - uses: docker/setup-qemu-action@v3
        if: env.DOCKER_BUILD_DISABLE == 'false'

      - name: Set up Docker Buildx
        if: env.DOCKER_BUILD_DISABLE == 'false'
        uses: docker/setup-buildx-action@v3
        id: builder

      - name: Build and push
        uses: docker/build-push-action@v6
        if: env.DOCKER_BUILD_DISABLE == 'false'
        id: build_push
        continue-on-error: false
        with:
          builder: ${{ steps.builder.outputs.name }}
          context: ${{ env.DOCKER_BUILD_CONTEXT_PATH }}
          file: ${{ env.DOCKER_BUILD_FILE_PATH }}
          platforms: ${{ env.DOCKER_BUILD_PLATFORMS }}
          push: ${{ env.DOCKER_BUILD_PUSH_BOOL_STR }}
          tags: ${{ env.AZ_REG_FQDN }}/${{ env.AZ_REG_REPOSITORY }}:${{ env.DOCKER_IMG_TAG_NAME }}
          build-args: |
            GIT_COMMIT_ARG=${{ github.sha }}
            ${{ env.DOCKER_BUILD_ARG1 }}

      - name: Prune ACR Images created before vars.AZ_REG_PRUNE_DAYS_TAGGED
        if: env.AZ_REG_PRUNE_FORCE_ANALYZE == 'true' || env.GIT_BRANCH_NAME == 'main'
        id: prune
        continue-on-error: true
        run: |
          npx --suppess-warnings zx scripts/analyze-acr.mjs
          if [ $AZ_REG_PRUNE_ENABLE_DELETE = true ]; then
            echo "INFO . manifests delete ..."
            sh "private-acr-manifests-delete.sh"
          else
            echo "INFO . manifests delete skipped"
          fi
          echo AZ_REG_ARTIFACTS_NAME=${AZ_REG_REPOSITORY/\//--} | tee -a $GITHUB_ENV | tee -a $GITHUB_OUTPUT | tee -a $GITHUB_STEP_SUMMARY

      - name: Upload ACR manifests artifacts
        if: steps.prune.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.AZ_REG_ARTIFACTS_NAME }}
          retention-days: 30
          path: |
            private*manifests*
            
            
      - name: 'Login to GitHub Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
          
      - name: Build and Push
        id: build-push2
        if: env.DOCKER_BUILD_DISABLE == 'false'
        uses: docker/build-push-action@v6
        continue-on-error: false
        with:
          builder: ${{ steps.builder.outputs.name }}
          context: ${{ env.DOCKER_BUILD_CONTEXT_PATH }}
          file: ${{ env.DOCKER_BUILD_FILE_PATH }}
          platforms: ${{ env.DOCKER_BUILD_PLATFORMS }}
          push: ${{ env.DOCKER_BUILD_PUSH_BOOL_STR }}
          tags: ghcr.io/data2evidence/${{ env.AZ_REG_REPOSITORY }}:${{ env.DOCKER_IMG_TAG_NAME }}
          build-args: |
            GIT_COMMIT_ARG=${{ github.sha }}
            ${{ env.DOCKER_BUILD_ARG1 }}
          
      - name: delete-untagged-images
        uses: actions/delete-package-versions@v5
        with: 
          package-name: ${{ env.AZ_REG_REPOSITORY }}
          package-type: 'container'
          min-versions-to-keep: 3
          delete-only-untagged-versions: "true"
